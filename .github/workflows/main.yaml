name: Build

on: [push]

jobs:

  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.8, 3.9]
        database-name:
          - test_build
        database-password:
          - postgres
        database-user:
          - postgres
        database-host:
          - 127.0.0.1
        database-port:
          - 5432

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ matrix.database-name }}
          POSTGRES_USER: ${{ matrix.database-user }}
          POSTGRES_PASSWORD: ${{ matrix.database-password }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
    - uses: actions/checkout@v2.4.0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.3.1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run migrations
      env:
        POSTGRES_DB_NAME: ${{ matrix.database-name }}
        POSTGRES_USER: ${{ matrix.database-user }}
        POSTGRES_PASSWORD: ${{ matrix.database-password }}
        POSTGRES_DB_HOST: ${{ matrix.database-host }}
        POSTGRES_DB_PORT: ${{ matrix.database-port }}
        POSTGRES_HOST: ${{ matrix.database-host }}
        POSTGRES_PORT: ${{ matrix.database-port }}
        POSTGRES_DB: ${{ matrix.database-name }}
      run: |
        export GITHUB_WORKFLOW=True
        export MODE=workflow
        python prism/manage.py makemigrations
        python prism/manage.py migrate
        python prism/manage.py migrate --run-syncdb
        python prism/manage.py check
    - name: Run tests
      run: |
          python prism/manage.py test
      env:
        DATABASE_URL: postgres://${{ matrix.database-user }}:${{ matrix.database-password }}@${{ matrix.database-host }}:${{ matrix.database-port }}/${{ matrix.database-name }}
        DJANGO_SECRET_KEY: test-secret-key
        DJANGO_DEBUG: 1
        DJANGO_ALLOWED_HOSTS: localhost
        GITHUB_WORKFLOW: True
        MODE: workflow
    - uses: actions/checkout@v2.4.0
    - name: 'Create env file'
      run: |
        touch .env
        echo DJANGO_SECRET_KEY='test' >> .env
        echo DJANGO_DEBUG=True >> .env
        echo DJANGO_ALLOWED_HOSTS=localhost >> .env

        echo POSTGRES_HOST=db >> .env
        echo POSTGRES_PORT=5432 >> .env
        echo POSTGRES_DB=test_django >> .env
        echo POSTGRES_USER=test_django >> .env
        echo POSTGRES_PASSWORD=test_django >> .env

        cat .env
    - name: Build the images and start the containers
      run: |
        export GITHUB_WORKFLOW=True
        export MODE="Test"
        docker-compose -f docker-compose.prod.yml build
        docker-compose -f docker-compose.prod.yml up -d
        # run: docker-compose up -d --build
    - name: Stop containers
      if: always()
      run: docker-compose -f docker-compose.prod.yml down